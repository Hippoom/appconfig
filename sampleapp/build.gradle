apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework', name: 'spring-webmvc', version: '3.2.6.RELEASE'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.7'

    compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'//should be provided

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.springframework', name: 'spring-test', version: '3.2.6.RELEASE'
    testCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.2.5'

}

test {
    exclude '**/*AcceptanceTest*'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task packageTests(type: Jar, dependsOn: jar) {
    classifier = 'tests'
    from sourceSets.test.output
}

war.dependsOn packageTests

jettyRunWar {
    httpPort = 9998
}

[jettyRunWar, jettyStop]*.stopKey = 'aStopKey'
[jettyRunWar, jettyStop]*.stopPort = 9999

ext.env = "${System.env.ENVIRONMENT}" ? "dev" : "${System.env.ENVIRONMENT}"
ext.configVersion = "${System.env.CONFIG_VERSION}" ? "2" : "${System.env.CONFIG_VERSION}"
ext.configDir = "../sampleapp-config/${env}/${configVersion}"

println '============================      ' + System.getProperty("ENVIRONMENT")
println '============================      ' + System.getProperty("CONFIG_VERSION")
println '============================      ' + "${System.env.ENVIRONMENT}"
println '============================      ' + "${System.env.CONFIG_VERSION}"
println '============================      ' + ext.env
println '============================      ' + ext.configVersion
println '============================      ' + ext.configDir

task substituteWar(type: Zip) {
    archiveName = 'sampleapp.war'
    from zipTree('build/libs/sampleapp.war')
    from(file(configDir)) {   // add new content
        into "WEB-INF/classes"
    }
}

task replaceConfiguredWar(type: Copy, dependsOn: substituteWar) {
    from 'build/distributions/sampleapp.war'
    into 'build/libs'
}

task extractJar(type: Copy) {
    from zipTree('build/libs/sampleapp.jar')
    into 'build/acceptanceTestDir'
}

task extractTestJar(type: Copy) {
    from zipTree('build/libs/sampleapp-tests.jar')
    into 'build/acceptanceTestDir'
}

task substituteTestConfig(type: Copy, dependsOn: [extractJar, extractTestJar]) {
    from configDir
    into 'build/acceptanceTestDir'
}

task acceptanceTest(type: Test) {
    // exclude compile as this task will be executed at pipeline-at and all binaries are compiled
    dependsOn = [replaceConfiguredWar, substituteTestConfig]
    testClassesDir = file('build/acceptanceTestDir/')
    classpath = classpath + files(testClassesDir)
    include '**/*AcceptanceTest*'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    doFirst {

        println "testClassesDir" + testClassesDir


        jettyRunWar.daemon = true
        jettyRunWar.execute()
    }
    doLast {
        jettyStop.execute()
    }
}


