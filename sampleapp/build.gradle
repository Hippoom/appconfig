apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

ext.env = "${System.env.ENVIRONMENT}" == "null" ? System.getProperty("ENVIRONMENT") : "${System.env.ENVIRONMENT}"

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework', name: 'spring-webmvc', version: '3.2.6.RELEASE'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.7'
    compile 'com.jcabi:jcabi-manifests:1.0.3'

    compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'//should be provided

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.springframework', name: 'spring-test', version: '3.2.6.RELEASE'
    testCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.2.5'

}


test {
    exclude '**/*AcceptanceTest*'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    doFirst {
        if (env != null) {
            tasks.create(name: 'fetchConfigVersionForCommit', type: Copy) {
                from 'build/resources/main/META-INF/MANIFEST.MF'
                into 'build/expected_config/META-INF'
            }.execute()

            loadConfig.execute()

            tasks.create(name: 'doSubstituteCommitTestConfig', type: Copy) {
                doFirst {
                    assert file(configDir()).exists()
                }
                from configDir()
                into 'build/resources/main'
            }.execute()
        }
    }
}

jar {
    manifest {
        from 'build/resources/main/META-INF/MANIFEST.MF'
    }
}

task packageTests(type: Jar, dependsOn: jar) {
    classifier = 'tests'
    from sourceSets.test.output
    manifest {
        from 'build/resources/main/META-INF/MANIFEST.MF'
    }
}

war {
    dependsOn packageTests
    manifest {
        from 'build/resources/main/META-INF/MANIFEST.MF'
    }
}

jettyRunWar {
    httpPort = 9998
}

[jettyRunWar, jettyStop]*.stopKey = 'aStopKey'
[jettyRunWar, jettyStop]*.stopPort = 9999


def configVersion() {
    Manifests.append(new File('build/expected_config/META-INF/MANIFEST.MF'))
    Manifests.read("ExpectedConfigVersion")
}

def configDir() {
    "build/config/" + configVersion()
}


import com.jcabi.manifests.Manifests
import org.ajoberstar.grgit.Grgit

task loadConfig() << {
    println '============================' + System.getProperty("ENVIRONMENT")
    println '============================' + "${System.env.ENVIRONMENT}"
    println '============================' + env

    def dir = new File('build/config')
    def grgit = dir.exists() ? Grgit.open(dir) : Grgit.clone(dir: new File('build/config'), uri: 'https://github.com/Hippoom/appconfig-config.git')
    grgit.checkout(branch: "origin/${env}")


}




task extractJar(type: Copy) {
    from zipTree('build/libs/sampleapp.jar')
    into 'build/acceptanceTestDir'
}

task extractTestJar(type: Copy) {
    from zipTree('build/libs/sampleapp-tests.jar')
    into 'build/acceptanceTestDir'
}

task fetchExpectedConfigVersion(type: Copy) {
    from zipTree('build/libs/sampleapp.war')
    into 'build/expected_config'
}

task substituteTestConfig(dependsOn: [extractJar, extractTestJar, fetchExpectedConfigVersion]) << {
    tasks.create(name: 'doSubstituteTestConfig', type: Copy) {
        doFirst {
            assert file(configDir()).exists()
        }
        from configDir()
        into 'build/acceptanceTestDir'
    }.execute()
}

task substituteWar(dependsOn: fetchExpectedConfigVersion) << {
    tasks.create(name: 'doSubstituteWar', type: Zip) {
        doFirst {
            assert file(configDir()).exists()
        }
        archiveName = 'sampleapp.war'
        from zipTree('build/libs/sampleapp.war')
        from(file(configDir())) {   // add new content
            into "WEB-INF/classes"
        }
    }.execute()
}

task replaceConfiguredWar(type: Copy, dependsOn: substituteWar) {
    from 'build/distributions/sampleapp.war'
    into 'build/libs'
}

task acceptanceTest(type: Test) {
    // exclude compile as this task will be executed at pipeline-at and all binaries are compiled
    dependsOn = [replaceConfiguredWar, substituteTestConfig]
    testClassesDir = file('build/acceptanceTestDir/')
    classpath = classpath + files(testClassesDir)
    include '**/*AcceptanceTest*'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    doFirst {
        jettyRunWar.daemon = true
        jettyRunWar.execute()
    }
    doLast {
        jettyStop.execute()
    }
}




buildscript {


    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.9.0'
        classpath 'com.jcabi:jcabi-manifests:1.0.3'
        classpath 'javax.servlet:servlet-api:2.5'
    }
}
